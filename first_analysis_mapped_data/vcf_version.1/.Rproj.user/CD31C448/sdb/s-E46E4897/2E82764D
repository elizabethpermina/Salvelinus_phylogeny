{
    "collab_server" : "",
    "contents" : "---\ntitle: \"vcf documentation\"\noutput: github_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n## GitHub Documents\n\nThis is an R Markdown format used for publishing markdown documents to GitHub. When you click the **Knit** button all R code chunks are run and a markdown file (.md) suitable for publishing to GitHub is generated.\n\n### libraries used\n```{r libraries}\nif(!require(dplyr)){\n  install.packages(\"dplyr\")\n}\nif(!require(ggplot2)){\n  install.packages(\"ggplot2\")\n}\nif(!require(SNPRelate)){ \nsource(\"https://bioconductor.org/biocLite.R\")\n  \nbiocLite(\"SNPRelate\")\n}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(SNPRelate)\n```\n\n\n## vcf manipulation \n\nfiles:\n```{r vcf header}\n\nheader_rows_number<-14\n```\n\n\n```{r population SNPs}\nsnp_forsequence_raw_file<-read.delim(file=\"populations.snps.vcf.txt\", header = TRUE, sep = \"\\t\", skip = header_rows_number)\nsnp_raw_file<-read.delim(file=\"populations.snps.vcf\", header = TRUE, sep = \"\\t\", )\nsnp_presumed_similarity<-read.delim(file=\"populations.snps.vcf.filtered.for.non-presence.presumed.0.txt\", header = TRUE, sep = \"\\t\" ) # ./. subst for 0/0:4,4:0 (min)\n\n```\n\n\n\n```{r code random trees echo=FALSE, eval=FALSE}\nsample_columns<-c(10:295)\n#snp_for_sequence<-snp_raw_file %>% select( contains(\"sample\")) \nsamples<-grepl(\"single\", names(snp_forsequence_raw_file))\n\n  snp_random_genotype <- apply(snp_forsequence_raw_file[samples], 1:2, function(x) as.factor(gsub(x, pattern = \"0.333\", replacement = rbinom(1, 1, 0.5)) ))  \n  \nsamples<-grepl(\"single\", names(snp_random_genotype))\n  snp_random_genotype_factor <- apply(snp_random_genotype[samples], 1:2, as.factor)\n  \n  df[] <- lapply( df, factor) # the \"[]\" keeps the dataframe structure\n col_names <- names(df)\n# do do it for some names in a vector named 'col_names'\ndf[col_names] <- lapply(df[col_names] , factor)\n\n  \n\n```\n\n## phylogeny\n\n```{r phylogeny, echo=FALSE, eval=FALSE} \n#vcf to GDS\n\nsnpgdsVCF2GDS(\"populations.snps.chr1.vcf\", \"populations.snps.chr2.gds\")\n\nsnpgdsSummary(\"populations.snps.chr1.gds\")\n\ngenofile <- openfn.gds(\"populations.snps.chr1.gds\")\n\n#dendogram\n\ndissMatrix  <-  snpgdsDiss(genofile , sample.id=NULL, snp.id=NULL, autosome.only=TRUE,remove.monosnp=TRUE, maf=NaN, missing.rate=NaN, num.thread=10, verbose=TRUE)\n\nsnpHCluster <-  snpgdsHCluster(dissMatrix$dist, sample.id=NULL, need.mat=TRUE, hang=0.25)\n\ncutTree <- snpgdsCutTree(snpHCluster, z.threshold=15, outlier.n=5, n.perm = 5000, samp.group=NULL,col.outlier=\"red\", col.list=NULL, pch.outlier=4, pch.list=NULL,label.H=FALSE, label.Z=TRUE, verbose=TRUE)\n\n#pca\n\nsample.id <- read.gdsn(index.gdsn(genofile, \"sample.id\"))\n\npop_code <- read.gdsn(index.gdsn(genofile, \"sample.id\"))\n\npca <- snpgdsPCA(genofile)\n\ntab <- data.frame(sample.id = pca$sample.id, pop = factor(pop_code)[match(pca$sample.id, sample.id)], EV1 = pca$eigenvect[,1],EV2 = pca$eigenvect[,2],stringsAsFactors = FALSE)\n\nplot(tab$EV2, tab$EV1, col=as.integer(tab$pop),xlab=\"eigenvector 2\", ylab=\"eigenvector 1\")\nlegend(\"topleft\", legend=levels(tab$pop), pch=\"o\", col=1:nlevels(tab$pop))\n```\n\n```{r engine = 'bash', echo=FALSE, eval=FALSE}\nИсходные файлы с ридами лежат вот тут \n/home/artem/Osinov/reads/SOMM238_R1_CGATTG.fastq\n/home/artem/Osinov/reads/SOMM238_R1_CGGAAT.fastq\n/home/artem/Osinov/reads/SOMM238_R1_GAGGTG.fastq\n/home/artem/Osinov/reads/SOMM238_R1_TTTTTG.fastq\n/home/artem/Osinov/reads/SOMM238_R3_CGATTG.fastq\n/home/artem/Osinov/reads/SOMM238_R3_CGGAAT.fastq\n/home/artem/Osinov/reads/SOMM238_R3_GAGGTG.fastq\n/home/artem/Osinov/reads/SOMM238_R3_TTTTTG.fastq\n\nА по баркодам я разбивал с помощью скрипта /home/artem/Osinov/reads/run_BestRadSplit.sh\nОн внутри себя использует скрипт /home/artem/Osinov/reads/BarcodeSplitListBestRadPairedEnd.pl\n```\n\n\n\n## Including Plots\n\nYou can also embed plots, for example:\n\n```{r pressure, echo=FALSE}\nplot(pressure)\n```\n\nNote that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.\n",
    "created" : 1520372277220.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "698304236",
    "id" : "2E82764D",
    "lastKnownWriteTime" : 1522284139,
    "last_content_update" : 1523505015168,
    "path" : "~/Documents/3_RADseq/scratch/vcf_version.1/vcf_version.1.Rmd",
    "project_path" : "vcf_version.1.Rmd",
    "properties" : {
        "last_setup_crc32" : "",
        "tempName" : "Untitled2"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}